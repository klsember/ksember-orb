version: 2.1

orbs:
  cli: circleci/circleci-cli@0.1.9
  orb-tools: circleci/orb-tools@10.0
  test-orb: klsember/test-orb@<<pipeline.parameters.dev-orb-version>>

parameters:
  run-integration-tests:
    description: An internal flag to prevent integration test from running before a development version has been created.
    type: boolean
    default: false
  dev-orb-version:
    description: >
      The development version of the orb to test.
      This value is automatically adjusted by the "trigger-integration-tests-workflow" job to correspond with the specific version created by the commit and should not be edited.
      A "dev:<<branch-name>>" version must exist for the initial pipeline run.
    type: string
    default: "dev:feature-orb-initialize"

commands:
  setup:
    description: Setting Up the project.....
    steps:
      - checkout
      - cli/install
      - run:
          name: "Run Setup Command"
          command: |
            circleci setup --no-prompt --token $CIRCLE_OWNER_TOKEN --no-prompt --host "https://circleci.com"

jobs:

  ##--------------------------------- VALIDATE ---------------------------------------------------------
  ##--------------------------------- VALIDATE ---------------------------------------------------------
  ##--------------------------------- VALIDATE ---------------------------------------------------------

  validate:
    docker:
      - image: cimg/base:stable
    steps:
      - setup
      - run:
          name: "Validate Orb File"
          command: |
            circleci orb validate ~/project/src/@orb.yml


  ##--------------------------------- DEV-PUBLISH ---------------------------------------------------
  ##--------------------------------- DEV-PUBLISH ---------------------------------------------------
  ##--------------------------------- DEV-PUBLISH ---------------------------------------------------

  dev-publish:
    docker:
      - image: cimg/base:stable
    steps:
      - setup
      - run:
          name: "Publish Dev Version"
          command: |
            circleci orb publish ~/project/src/@orb.yml klsember/test-orb@dev:${CIRCLE_BRANCH} --token $CIRCLE_OWNER_TOKEN
      - run:
          name: "Get Orb Info If Any"
          command: |
            circleci orb info klsember/test-orb


  # Define one or more jobs which will utilize your orb's commands and parameters to validate your changes.
  integration-test-1:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      # This sample integration test will run as long as the greet command exists. Once you remove the greet command you should remove this line.
      # Push new changes first, before adding new tests to your config.
      - test-orb/greet

  ##--------------------------------- WORKFLOW ---------------------------------------------------------
  ##--------------------------------- WORKFLOW ---------------------------------------------------------
  ##--------------------------------- WORKFLOW ---------------------------------------------------------

workflows:
  version: 2
  test-pack:
    jobs:
      - orb-tools/lint # Lint Yaml files
      - orb-tools/pack # Pack orb source
      - validate:
          requires:
            - orb-tools/lint
            - orb-tools/pack
      - dev-publish:
          name: Publish Dev Version
          requires:
            - orb-tools/lint
            - orb-tools/pack

      # Trigger an integration workflow to test the
      # dev:${CIRCLE_SHA1:0:7} version of your orb
      - orb-tools/trigger-integration-tests-workflow:
          name: trigger-integration-dev
          context: orb-publishing
          requires:
            - dev-publish
            
  # This `integration-test_deploy` workflow will only run
  # when the run-integration-tests pipeline parameter is set to true.
  # It is meant to be triggered by the "trigger-integration-tests-workflow"
  # job, and run tests on <your orb>@dev:${CIRCLE_SHA1:0:7}.
  integration-test_deploy:
    when: << pipeline.parameters.run-integration-tests >>
    jobs:
      # Run any integration tests defined within the `jobs` key.
      - integration-test-1
